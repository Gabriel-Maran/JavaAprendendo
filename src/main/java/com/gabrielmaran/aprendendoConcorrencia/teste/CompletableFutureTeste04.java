package com.gabrielmaran.aprendendoConcorrencia.teste;

import com.gabrielmaran.aprendendoConcorrencia.dominio.Quote;
import com.gabrielmaran.aprendendoConcorrencia.service.StoreServiceWithDescount;

import java.util.List;
import java.util.concurrent.CompletableFuture;

public class CompletableFutureTeste04 {
    public static void main(String[] args) {
        StoreServiceWithDescount service = new StoreServiceWithDescount();
        searchPricesWithDiscountAsymc(service);
    }

    private static void searchPricesWithDiscount(StoreServiceWithDescount service) {
        long start = System.currentTimeMillis();
        List<String> lojas = List.of("Store 1", "Store 2", "Store 3", "Store 4");
//        lojas.forEach(s-> System.out.println(service.getPriceSync(s)));
        lojas.stream()
                .map(service::getPriceSync)// sotre:price:code
                .map(Quote::newQuote)
                .map(service::applyDiscountSync)
                .forEach(System.out::println);
        long end = System.currentTimeMillis();
        System.out.println("Time: " + (end - start) + "ms");
    }

    private static void searchPricesWithDiscountAsymc(StoreServiceWithDescount service) {
        long start = System.currentTimeMillis();
        List<String> lojas = List.of("Store 1", "Store 2", "Store 3", "Store 4");
        List<CompletableFuture<String>> listCFS = lojas.stream()
                //pegando o preÃ§o async storeName:price:discountCode
                .map(s -> CompletableFuture.supplyAsync(() -> service.getPriceSync(s)))
                //Instantiating a new quote from a string generated by getPriceSync
                .map(cf -> cf.thenApply(Quote::newQuote))
                //Composing the first completable future
                .map(cf -> cf.thenCompose(quote -> CompletableFuture.supplyAsync(() -> service.applyDiscountSync(quote))))
                .toList();
        listCFS.stream()
                .map(CompletableFuture::join)
                .forEach(System.out::println);

        long end = System.currentTimeMillis();
        System.out.println("Time: " + (end - start) + "ms");
    }
}
